{"name":"Data-tree","tagline":"Data oriented tree structure that unleashes the power of callbacks to create, search and traverse the tree.","body":"## Install:\r\n`$ npm install data-tree`<br /><br />\r\nThen use via `require('data-tree')` **OR** use browserified build available at [dataTree.min.js](http://cchandurkar.github.io/Data-Tree/dataTree.min.js) in `<script/>` tag.\r\n\r\n## Examples:\r\nFollowing examples will guide you about how to create tree, insert/remove nodes and search/traverse a tree. Don't forget to check [Data-Tree reference](http://cchandurkar.github.io/Data-Tree/docs/).\r\n\r\n### Create tree\r\n`dataTree` is global variable that can be used to create a tree in following way.\r\n```javascript\r\n  var tree = dataTree.create();\r\n```\r\n\r\n### Insert data\r\n```javascript\r\n// Insert single value\r\ntree.insert(183);\r\n\r\n// Insert array of values\r\n// NOTE: This does not create 3 different nodes. It considers an array as a whole data and puts in a single node.\r\ntree.insert([34, 565, 78]);\r\n\r\n// Insert Objects\r\ntree.insert({\r\n  key: '#berries',\r\n  value: { name: 'Apple', color: 'Red'}\r\n});\r\n```\r\n\r\n### Create and append node to a parent node that satisfies the given criteria\r\n```javascript\r\n// Insert data\r\ntree.insert({\r\n  key: '#apple',\r\n  value: { name: 'Apple', color: 'Red'}\r\n});\r\n\r\n// New Data\r\nvar greenApple = {\r\n  key: '#greenapple',\r\n  value: { name: 'Green Apple', color: 'Green' }\r\n};\r\n\r\n// Insert data to node which has `key` = #apple\r\ntree.insertTo(function(data){\r\n  return data.key === '#apple'\r\n}, greenApple);\r\n```\r\n\r\n### Create and append node using parent node's instance\r\n```javascript\r\n// Insert data\r\nvar node = tree.insert({\r\n  key: '#apple',\r\n  value: { name: 'Apple', color: 'Red'}\r\n});\r\n\r\n// New Data\r\nvar greenApple = {\r\n key: '#greenapple',\r\n value: { name: 'Green Apple', color: 'Green' }\r\n};\r\n\r\n// Insert data to node\r\n// This will create a new node with given data and append to parent node provided\r\ntree.insertToNode(node, greenApple);\r\n```\r\n\r\n### Remove Node\r\n```javascript\r\n// Insert Node\r\nvar node = tree.insert({\r\n  key: '#apple',\r\n  value: { name: 'Apple', color: 'Red'}\r\n});\r\n\r\n// Remove it\r\ntree.remove(node);\r\n```\r\n\r\n### Search BFS\r\n```javascript\r\nvar node = tree.traverser().searchBFS(function(data){\r\n  return data.key === '#apple';\r\n});\r\n```\r\n\r\n### Search DFS\r\n```javascript\r\nvar node = tree.traverser().searchDFS(function(data){\r\n  return data.key === '#apple';\r\n});\r\n```\r\n\r\n### Traverse BFS\r\n```javascript\r\ntree.traverser().traverseBFS(function(node){\r\n  console.log(node.data());\r\n});\r\n```\r\n\r\n#### Traverse DFS\r\n```javascript\r\ntree.traverser().traverseDFS(function(node){\r\n  console.log(node.data());\r\n});\r\n```\r\n\r\n## Develop\r\n1. Clone this repositoy and `cd` into it\r\n3. `npm install`\r\n4. `grunt build` to build browserify files **OR** `grunt watch` to build automatically upon file change.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}